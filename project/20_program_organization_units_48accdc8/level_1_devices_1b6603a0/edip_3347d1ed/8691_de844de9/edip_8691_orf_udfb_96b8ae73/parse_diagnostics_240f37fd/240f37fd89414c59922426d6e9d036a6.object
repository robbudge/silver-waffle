{"payload":{"meta":{"Graph":{"@Type":"81297157","@Value":{"Guid":"(Guid)240f37fd-8941-4c59-9224-26d6e9d036a6","ParentGuid":"(Guid)96b8ae73-514e-49cb-bc30-3f948196fc19","Name":"(string)Parse_Diagnostics","Properties":{"@Type":"2c41fa04:IDictionary","@Value":[{"@Key":"(Guid)24568a24-c491-472c-a21f-ee5d33859fab","@Value":{"@Type":"24568a24","@Value":{"MemoryReserveForOnlineChange":"(int)0","ExcludeFromBuild":"(bool)True","External":"(bool)False","EnableSystemCall":"(bool)False","CompilerDefines":"(string)","LinkAlways":"(bool)False","Undefines":{"@Type":"[string]","@Value":[]}}}}]},"TypeGuid":"(Guid)8ac092e5-3128-4e26-9e7e-11016c6684f2","EmbeddedTypeGuids":{"@Type":"[Guid]","@Value":["(Guid)3b83b776-fb25-43b8-99f2-3c507c9143fc"]}}},"TypeInfos":{"24568a24":"{24568a24-c491-472c-a21f-ee5d33859fab}","2c41fa04":"{2c41fa04-1834-41c1-816e-303c7aa2c05b}","81297157":"{81297157-7ec9-45ce-845e-84cab2b88ade}","bool":"System.Boolean","Guid":"System.Guid","int":"System.Int32","string":"System.String"}},"object":{"Graph":{"@Type":"8ac092e5","@Value":{"Implementation":{"@Type":"3b83b776","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)Block_Size:=SIZEOF(ORF_Request);\nORF_pointer:=ORF_Data;\n\nXtune_Active:= (BCV.eDip.Tune_State>0) AND (BCV.eDip.Tune_State<10);\n\nFOR ORF_Index := 0 TO 28 BY 1 DO\n\t\n\tORF_Index_LB:=ORF_pointer[0];\n\tORF_Index_HB:=ORF_Pointer[1];\n\tORF_SubIndex:=ORF_pointer[2];\n\tORF_Node:=ORF_pointer[3];\n\tORF_Complete:=ORF_pointer[10];\n\t\n\t\n\tIF ORF_Complete.0 AND (ORF_Node= Node) AND (ORF_Index_HB=16#2C) AND (ORF_Index_LB=16#0E) THEN\n\t\tMEMUtils.MemSet(pbyBuffer:=ORF_pointer+10 , byValue:=0 , dwSize:= 1); // Clear Complete\n\t\tCASE ORF_SubIndex OF\n\t\t\t\n\t\t\t16#01:\n\t\t\t\tMEMUtils.MemCpy(pbyDest:=ADR(BCV.eDip.Total_Travel)+2 , pbySrc:=orf_Pointer+4 , dwSize:=2 );\n\t\t\t\tMEMUtils.MemCpy(pbyDest:=ADR(BCV.eDip.Total_Travel) , pbySrc:=orf_Pointer+6 , dwSize:=2 );\n\t\t\t\tMEMUtils.MemSet(pbyBuffer:=orf_Pointer+9 , byValue:=1 , dwSize:= 1);// Set Enable\n\n\t\t\t\t\n\t\t\t16#2:\n\t\t\t\tMEMUtils.MemCpy(pbyDest:=ADR(BCV.eDip.Travel_Service)+2 , pbySrc:=orf_Pointer+4 , dwSize:=2 );\n\t\t\t\tMEMUtils.MemCpy(pbyDest:=ADR(BCV.eDip.Travel_Service) , pbySrc:=orf_Pointer+6 , dwSize:=2 );\n\t\t\t\tIF NOT(xTune_Active) THEN\n\t\t\t\t\t\tMEMUtils.MemSet(pbyBuffer:=orf_Pointer+9 , byValue:=1 , dwSize:= 1);// Set Enable\n\t\t\t\tEND_IF;\t\n\t\t\t\t\n\t\t\t16#3:\n\t\t\t\tMEMUtils.MemCpy(pbyDest:=ADR(BCV.eDip.Travel_Service_Limit)+2 , pbySrc:=orf_Pointer+4 , dwSize:=2 );\n\t\t\t\tMEMUtils.MemCpy(pbyDest:=ADR(BCV.eDip.Travel_Service_Limit) , pbySrc:=orf_Pointer+6 , dwSize:=2 );\n\t\t\t\tIF NOT(xTune_Active) THEN\n\t\t\t\t\t\tMEMUtils.MemSet(pbyBuffer:=orf_Pointer+9 , byValue:=1 , dwSize:= 1);// Set Enable\n\t\t\t\tEND_IF;\t\n\t\t\t16#4:\n\t\t\t\tMEMUtils.MemCpy(pbyDest:=ADR(BCV.eDip.Total_Valve_Cycles)+2 , pbySrc:=orf_Pointer+4 , dwSize:=2 );\n\t\t\t\tMEMUtils.MemCpy(pbyDest:=ADR(BCV.eDip.Total_Valve_Cycles) , pbySrc:=orf_Pointer+6 , dwSize:=2 );\n\t\t\t\tIF NOT(xTune_Active) THEN\n\t\t\t\t\t\tMEMUtils.MemSet(pbyBuffer:=orf_Pointer+9 , byValue:=1 , dwSize:= 1);// Set Enable\n\t\t\t\tEND_IF;\t\n\t\t\t16#5:\n\t\t\t\tMEMUtils.MemCpy(pbyDest:=ADR(BCV.eDip.Valve_Cycles_Service)+2 , pbySrc:=orf_Pointer+4 , dwSize:=2 );\n\t\t\t\tMEMUtils.MemCpy(pbyDest:=ADR(BCV.eDip.Valve_Cycles_Service) , pbySrc:=orf_Pointer+6 , dwSize:=2 );\n\t\t\t\tIF NOT(xTune_Active) THEN\n\t\t\t\t\t\tMEMUtils.MemSet(pbyBuffer:=orf_Pointer+9 , byValue:=1 , dwSize:= 1);// Set Enable\n\t\t\t\tEND_IF;\t\n\t\t\t16#6:\n\t\t\t\tMEMUtils.MemCpy(pbyDest:=ADR(BCV.eDip.Valve_Cycles_Service_Limit)+2 , pbySrc:=orf_Pointer+4 , dwSize:=2 );\n\t\t\t\tMEMUtils.MemCpy(pbyDest:=ADR(BCV.eDip.Valve_Cycles_Service_Limit) , pbySrc:=orf_Pointer+6 , dwSize:=2 );\n\t\t\t\tIF NOT(xTune_Active) THEN\n\t\t\t\t\t\tMEMUtils.MemSet(pbyBuffer:=orf_Pointer+9 , byValue:=1 , dwSize:= 1);// Set Enable\n\t\t\t\tEND_IF;\t\n\t\t\t16#7:\n\t\t\t\tMEMUtils.MemCpy(pbyDest:=ADR(BCV.eDip.Time_Service)+2 , pbySrc:=orf_Pointer+4 , dwSize:=2 );\n\t\t\t\tMEMUtils.MemCpy(pbyDest:=ADR(BCV.eDip.Time_Service) , pbySrc:=orf_Pointer+6 , dwSize:=2 );\n\t\t\t\tIF NOT(xTune_Active) THEN\n\t\t\t\t\t\tMEMUtils.MemSet(pbyBuffer:=orf_Pointer+9 , byValue:=1 , dwSize:= 1);// Set Enable\n\t\t\t\tEND_IF;\t\n\t\t\t16#8:\n\t\t\t\tMEMUtils.MemCpy(pbyDest:=ADR(BCV.eDip.Time_Service_limit)+2 , pbySrc:=orf_Pointer+4 , dwSize:=2 );\n\t\t\t\tMEMUtils.MemCpy(pbyDest:=ADR(BCV.eDip.Time_Service_limit) , pbySrc:=orf_Pointer+6 , dwSize:=2 );\n\t\t\t\tIF NOT(xTune_Active) THEN\n\t\t\t\t\t\tMEMUtils.MemSet(pbyBuffer:=orf_Pointer+9 , byValue:=1 , dwSize:= 1);// Set Enable\n\t\t\t\tEND_IF;\t\n\t\t\t\t\n\t\t\t16#0A:\n\t\t\t\tMEMUtils.MemCpy(pbyDest:=ADR(BCV.eDip.Opening_Time_Limit)+2 , pbySrc:=orf_Pointer+4 , dwSize:=2 );\n\t\t\t\tMEMUtils.MemCpy(pbyDest:=ADR(BCV.eDip.Opening_Time_Limit) , pbySrc:=orf_Pointer+6 , dwSize:=2 );\n\t\t\t\tIF NOT(xTune_Active) THEN\n\t\t\t\t\t\tMEMUtils.MemSet(pbyBuffer:=orf_Pointer+9 , byValue:=1 , dwSize:= 1);// Set Enable\n\t\t\t\tEND_IF;\t\n\t\t\t16#0B:\n\t\t\t\tMEMUtils.MemCpy(pbyDest:=ADR(BCV.eDip.Closing_Time_Limit)+2 , pbySrc:=orf_Pointer+4 , dwSize:=2 );\n\t\t\t\tMEMUtils.MemCpy(pbyDest:=ADR(BCV.eDip.Closing_Time_Limit) , pbySrc:=orf_Pointer+6 , dwSize:=2 );\n\t\t\t\tIF NOT(xTune_Active) THEN\n\t\t\t\t\t\tMEMUtils.MemSet(pbyBuffer:=orf_Pointer+9 , byValue:=1 , dwSize:= 1);// Set Enable\n\t\t\t\tEND_IF;\t\n\t\t\t16#0C:\n\t\t\t\tMEMUtils.MemCpy(pbyDest:=ADR(BCV.eDip.Time_Tollereance)+2 , pbySrc:=orf_Pointer+4 , dwSize:=2 );\n\t\t\t\tMEMUtils.MemCpy(pbyDest:=ADR(BCV.eDip.Time_Tollereance) , pbySrc:=orf_Pointer+6 , dwSize:=2 );\n\t\t\t\tIF NOT(xTune_Active) THEN\n\t\t\t\t\t\tMEMUtils.MemSet(pbyBuffer:=orf_Pointer+9 , byValue:=1 , dwSize:= 1);// Set Enable\n\t\t\t\tEND_IF;\t\n\t\t\t16#0D:\n\t\t\t\tMEMUtils.MemCpy(pbyDest:=ADR(BCV.eDip.Opening_Error_Count)+2 , pbySrc:=orf_Pointer+4 , dwSize:=2 );\n\t\t\t\tMEMUtils.MemCpy(pbyDest:=ADR(BCV.eDip.Opening_Error_Count) , pbySrc:=orf_Pointer+6 , dwSize:=2 );\n\t\t\t\tIF NOT(xTune_Active) THEN\n\t\t\t\t\t\tMEMUtils.MemSet(pbyBuffer:=orf_Pointer+9 , byValue:=1 , dwSize:= 1);// Set Enable\n\t\t\t\tEND_IF;\t\n\t\t\t16#0E:\n\t\t\t\tMEMUtils.MemCpy(pbyDest:=ADR(BCV.eDip.Closing_Error_Count)+2 , pbySrc:=orf_Pointer+4 , dwSize:=2 );\n\t\t\t\tMEMUtils.MemCpy(pbyDest:=ADR(BCV.eDip.Closing_Error_Count) , pbySrc:=orf_Pointer+6 , dwSize:=2 );\n\t\t\t\tIF NOT(xTune_Active) THEN\n\t\t\t\t\t\tMEMUtils.MemSet(pbyBuffer:=orf_Pointer+9 , byValue:=1 , dwSize:= 1);// Set Enable\n\t\t\t\tEND_IF;\t\n\t\t\t16#0F:\n\t\t\t\tMEMUtils.MemCpy(pbyDest:=ADR(BCV.eDip.Tune_Starts)+2 , pbySrc:=orf_Pointer+4 , dwSize:=2 );\n\t\t\t\tMEMUtils.MemCpy(pbyDest:=ADR(BCV.eDip.Tune_Starts) , pbySrc:=orf_Pointer+6 , dwSize:=2 );\n\t\t\t\tMEMUtils.MemSet(pbyBuffer:=orf_Pointer+9 , byValue:=1 , dwSize:= 1);// Set Enable\n\t\t\t16#10:\n\t\t\t\tMEMUtils.MemCpy(pbyDest:=ADR(BCV.eDip.Pilot_Cycles)+2 , pbySrc:=orf_Pointer+4 , dwSize:=2 );\n\t\t\t\tMEMUtils.MemCpy(pbyDest:=ADR(BCV.eDip.Pilot_Cycles) , pbySrc:=orf_Pointer+6 , dwSize:=2 );\n\t\t\t\tMEMUtils.MemSet(pbyBuffer:=orf_Pointer+9 , byValue:=1 , dwSize:= 1);// Set Enable\n\t\tEND_CASE\n\tEND_IF;\n\t\n\t\n\tIF (orf_Pointer[10]=1) AND (ORF_Node= Node) AND (ORF_Index_HB=16#2C) AND (ORF_Index_LB=16#0C) AND (ORF_SubIndex=16#06) THEN\n\t\tMEMUtils.MemCpy(pbyDest:=ADR(BCV.eDip.isCalibrated) , pbySrc:=orf_Pointer+6 , dwSize:=1 );\n\t\tMEMUtils.MemSet(pbyBuffer:=orf_Pointer+9 , byValue:=1 , dwSize:= 1);// Set Enable\n\t\tMEMUtils.MemSet(pbyBuffer:=ORF_pointer+10 , byValue:=0 , dwSize:= 1); // Clear Complete\n\tEND_IF;\n\t\n\tIF (orf_Pointer[10]=1) AND (ORF_Node= Node) AND (ORF_Index_HB=16#2C) AND (ORF_Index_LB=16#0C) AND (ORF_SubIndex=16#07) THEN\n\t\tMEMUtils.MemCpy(pbyDest:=ADR(BCV.eDip.Tune_State) , pbySrc:=orf_Pointer+6 , dwSize:=1 );\n\t\tMEMUtils.MemSet(pbyBuffer:=orf_Pointer+9 , byValue:=1 , dwSize:= 1);// Set Enable\n\t\tMEMUtils.MemSet(pbyBuffer:=ORF_pointer+10 , byValue:=0 , dwSize:= 1); // Clear Complete\n\tEND_IF;\n\t\n\tIF (orf_Pointer[10]=1) AND (ORF_Node= Node) AND (ORF_Index_HB=16#2C) AND (ORF_Index_LB=16#0C) AND (ORF_SubIndex=16#08) THEN\n\t\tMEMUtils.MemCpy(pbyDest:=ADR(BCV.eDip.Start_Tune) , pbySrc:=orf_Pointer+6 , dwSize:=1 );\n\t\tMEMUtils.MemSet(pbyBuffer:=orf_Pointer+9 , byValue:=1 , dwSize:= 1);// Set Enable\n\t\tMEMUtils.MemSet(pbyBuffer:=ORF_pointer+10 , byValue:=0 , dwSize:= 1); // Clear Complete\n\tEND_IF;\n\t\n\t\n\t\n\t\n\t\n\tIF (ORF_Index_HB=16#21) AND (ORF_Index_LB=16#01) AND (ORF_SubIndex=16#01) AND(ORF_Node=Node) THEN\n\t\t IF  (BCV.Mode<>eBCV_Modes.Identify) THEN\n\t\t\tORF_pointer[3]:=Node;\n\t\t\tORF_Pointer[4]:=16#0;\n\t\t\tORF_Pointer[5]:=16#0;\n\t\t\tORF_Pointer[6]:=16#0;\n\t\t\tORF_Pointer[7]:=16#0;\n\t\t\tORF_pointer[8]:=16#0;\n\t\t\tORF_pointer[9]:=16#01; //Set  Enable\n\t\t\tORF_pointer[10]:=16#0;\t// Clear Complete\n\t\tEND_IF;\n\t\t\n\t\tIF BCV.Mode.eMode=eBCV_Modes.Identify THEN\n\t\t\tORF_pointer[3]:=Node; \n\t\t\tORF_Pointer[4]:=16#00;\n\t\t\tORF_Pointer[5]:=16#00;\n\t\t\tORF_Pointer[6]:=16#01;\n\t\t\tORF_Pointer[7]:=16#00;\t\t// Set Command to 1\n\t\t\tORF_pointer[8]:=16#01;\t\t//Set Write Length to 1\n\t\t\tORF_pointer[9]:=16#01; //Set  Enable\n\t\t\tORF_pointer[10]:=16#0;\t// Clear Complete\n\t\tEND_IF;\n\t\t\n\t\t\n\t\t\n\t\t\n\tEND_IF;\n\t\n\t\n\n\t\t\n\t\n\t\n\t\t\n//x_tune\n\tIF (ORF_Node= Node) AND (ORF_Index_HB=16#2C) AND (ORF_Index_LB=16#0C) AND (ORF_SubIndex=16#08) AND (BCV.Mode.eMode=eBCV_Modes.xTune) THEN\n\t\t\tORF_pointer[3]:=Node; \n\t\t\tORF_Pointer[4]:=16#00;\n\t\t\tORF_Pointer[5]:=16#00;\n\t\t\tORF_Pointer[6]:=16#01;\n\t\t\tORF_Pointer[7]:=16#00;\t\t// Set Command to 1\n\t\t\tORF_pointer[8]:=16#01;\t\t//Set Write Length to 1\n\t\t\tORF_pointer[9]:=16#01; //Set  Enable\n\t\t\tORF_pointer[10]:=16#0;\t// Clear Complete\n\tEND_IF;\n\t\n\tIF (orf_Pointer[10]=1) AND (ORF_Node=Node) AND (ORF_Index_HB=16#2C) AND (ORF_Index_LB=16#0C) AND (ORF_SubIndex=16#08)  AND Xtune_Active THEN // x-Tune Command issued reset ORF Request for read\n\t\t\tORF_pointer[3]:=Node;\n\t\t\tORF_Pointer[4]:=16#0;\n\t\t\tORF_Pointer[5]:=16#0;\n\t\t\tORF_Pointer[6]:=16#0;\n\t\t\tORF_Pointer[7]:=16#0;\n\t\t\tORF_pointer[8]:=16#0;\n\t\t\tBCV.Mode:=eBCV_Modes.Closed;\n\t\t\tORF_pointer[9]:=16#01; //Set  Enable\n\t\t\tORF_pointer[10]:=16#0;\t// Clear Complete\n\tEND_IF;\n\t\n\tIF (ORF_Node=Node) AND (ORF_Index_HB=16#2C) AND (ORF_Index_LB=16#0C) AND (ORF_SubIndex=16#08) AND BCV.Mode<>eBCV_Modes.xTune THEN\n\t\t\tORF_pointer[3]:=Node;\n\t\t\tORF_Pointer[4]:=16#0;\n\t\t\tORF_Pointer[5]:=16#0;\n\t\t\tORF_Pointer[6]:=16#0;\n\t\t\tORF_Pointer[7]:=16#0;\n\t\t\tORF_pointer[8]:=16#0;\n\t\t\tORF_pointer[9]:=16#01; //Set  Enable\n\t\t\tORF_pointer[10]:=16#0;\t// Clear Complete\n\tEND_IF;\n\t\n\t\n\t\n\t\t//Error Field\n\tIF ORF_Complete.0 AND (ORF_Node= Node) AND (ORF_Index_HB=16#10) AND (ORF_Index_LB=16#03) THEN\t\n\t\tMEMUtils.MemSet(pbyBuffer:=ORF_pointer+10 , byValue:=BOOL_TO_BYTE(xTune_Active) , dwSize:= 1); // Clear Complete\n\t\tCASE ORF_SubIndex OF\n\t\t\t0: \n\t\t\t\tAlarm_Count:=orf_pointer[6];\n\t\t\t\tMEMUtils.MemSet(pbyBuffer:=orf_Pointer+9 , byValue:=1 , dwSize:= 1);// Set Enable\n\t\t\t\tMEMUtils.MemSet(pbyBuffer:=orf_Pointer+9+(Block_Size) , byValue:=BOOL_TO_BYTE(Alarm_Count>0) , dwSize:= 1);// Set Enable\n\t\t\t\tMEMUtils.MemSet(pbyBuffer:=orf_Pointer+9+(Block_Size*2) , byValue:=BOOL_TO_BYTE(Alarm_Count>1) , dwSize:= 1);// Set Enable\n\t\t\t\tIF Alarm_Count<1 THEN\n\t\t\t\t\tBCV.eDip.Alarm_Code_1:=0;\n\t\t\t\tEND_IF;\n\t\t\t\tIF Alarm_Count<2 THEN\n\t\t\t\t\tBCV.eDip.Alarm_Code_2:=0;\n\t\t\t\tEND_IF;\n\t\t\t1:\n\t\t\t\tMEMUtils.MemCpy(pbyDest:=ADR(BCV.eDip.Alarm_Code_1)+2 , pbySrc:=orf_Pointer+4 , dwSize:=2 );\n\t\t\t\tMEMUtils.MemCpy(pbyDest:=ADR(BCV.eDip.Alarm_Code_1) , pbySrc:=orf_Pointer+6 , dwSize:=2 );\n\t\t\t\tMEMUtils.MemSet(pbyBuffer:=orf_Pointer+9 , byValue:=1 , dwSize:= 1);// Set Enable\n\t\t\t2:\n\t\t\t\tMEMUtils.MemCpy(pbyDest:=ADR(BCV.eDip.Alarm_Code_1)+2 , pbySrc:=orf_Pointer+4 , dwSize:=2 );\n\t\t\t\tMEMUtils.MemCpy(pbyDest:=ADR(BCV.eDip.Alarm_Code_1) , pbySrc:=orf_Pointer+6 , dwSize:=2 );\n\t\t\t\tMEMUtils.MemSet(pbyBuffer:=orf_Pointer+9 , byValue:=1 , dwSize:= 1);// Set Enable\n\t\t\t\t\n\t\t\t\t\n\t\t\t\n\t\tEND_CASE;\n\tEND_IF;\n\t\norf_Pointer:=orf_Pointer+Block_Size;\t\nEND_FOR;\n\n\t","LineInfoPersistence":"(string)240f37fd-8941-4c59-9224-26d6e9d036a6_Impl_LineIds"}}}},"UniqueIdGenerator":"(string)283"}},"TypeInfos":{"3b83b776":"{3b83b776-fb25-43b8-99f2-3c507c9143fc}","8ac092e5":"{8ac092e5-3128-4e26-9e7e-11016c6684f2}","f3878285":"{f3878285-8e4f-490b-bb1b-9acbb7eb04db}","string":"System.String"}}},"FormatVersion":"1.0"}